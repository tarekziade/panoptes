<!DOCTYPE html><html lang='en' class=''>
<head>

<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bulma/0.4.0/css/bulma.css'>
<style class="cp-pen-styles"></style></head><body>
<header class="hero is-light">
  <div class="hero-head">
    <nav class="nav has-shadow">
      <div class="nav-left">
        <a class="nav-item is-tab is-active">Panoptes</a>
        <a class="nav-item is-tab is-hidden-mobile">Home</a>
      </div>
      <span class="nav-toggle">
        <span></span>
        <span></span>
        <span></span>
      </span>
      <div class="nav-right nav-menu">
        <a class="nav-item is-tab">Log out</a>
      </div>
    </nav>
  </div>
</header>

<div class="section">
  <div class="columns">
    <main class="column">
      <div class="level">
        <div class="level-left">
          <div class="level-item">
            <div class="title">Nightly Debug 65.0a1</div>
          </div>
        </div>
        <div class="level-right">
          <div class="level-item">
            <button type="button" class="button is-small" id="uptime">
              Uptime : Unkown
            </button>
          </div>
        </div>
      </div>

      <div class="columns is-multiline">
        <div class="column auto">
            <div id="perf-container">
            </div>
        </div>
        <div class="column auto">
            <div id="io-container">
          </div>
        </div>

        <div class="column auto">
            <div id="cpu-container">
          </div>
        </div>

  <div class="column auto">
            <div id="memory-container">
          </div>
        </div>

      </div>
      <div class="columns is-multiline">
               <div class="column auto">
            <table class="table" id="top_io">
               <tr>
                  <th>Location</th>
                  <th>Reads</th>
                  <th>Writes</th>
               </tr>
               <tr><td></td><td></td><td></td></tr>
               <tr><td></td><td></td><td></td></tr>
               <tr><td></td><td></td><td></td></tr>
               <tr><td></td><td></td><td></td></tr>
               <tr><td></td><td></td><td></td></tr>
            </table>
       </div>

      </div>
      <div class="columns is-multiline">
       <div class="column auto">
          <div class="panel">
            <p class="panel-heading">
              Timeline
            </p>
            <div class="panel-block">

            </div>
          </div>
        </div>
      </div>

      <div class="columns is-multiline">
      </div>
            </main>
  </div>
</div>

    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script>
function secondsToStr (data) {
  var milliseconds = 1000 * data;
    function numberEnding (number) {
        return (number > 1) ? 's' : '';
    }

    var temp = Math.floor(milliseconds / 1000);
    var years = Math.floor(temp / 31536000);
    if (years) {
        return years + ' year' + numberEnding(years);
    }
    //TODO: Months! Maybe weeks?
    var days = Math.floor((temp %= 31536000) / 86400);
    if (days) {
        return days + ' day' + numberEnding(days);
    }
    var hours = Math.floor((temp %= 86400) / 3600);
    if (hours) {
        return hours + ' hour' + numberEnding(hours);
    }
    var minutes = Math.floor((temp %= 3600) / 60);
    if (minutes) {
        return minutes + ' minute' + numberEnding(minutes);
    }
    var seconds = temp % 60;
    if (seconds) {
        return seconds + ' second' + numberEnding(seconds);
    }
    return 'less than a second'; //'just now' //or other string you like;
}

var io_graph;
var perf_graph;

const loadData = () => {

  fetch('/perf_usage')
    .then( response => {
      if (response.status !== 200) {
        console.log(response);
      }
      return response;
    })
    .then(response => response.json())
    .then(parsedResponse => {
      const unpackData = (arr, key) => {
        return arr.map(obj => obj[key])
      }
      const firstTrace = {
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Dispatches',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'count'),
        line: {color: '#17BECF'}
      }
      const secondTrace = {
        type: "scatter",
        mode: "lines+markers",
        name: 'Duration (ms)',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'duration'),
        line: {color: '#7F7F7F'}
      }
      const data = [firstTrace, secondTrace];
      const layout = {
        title: 'Quantum Scheduler Activity',
       showlegend: false
      };
        perf_graph = Plotly.newPlot('perf-container', data, layout);
      return perf_graph;
    })
    .catch( error => console.log(error) );

  fetch('/io_usage')
    .then( response => {
      if (response.status !== 200) {
        console.log(response);
      }
      return response;
    })
    .then(response => response.json())
    .then(parsedResponse => {
      const unpackData = (arr, key) => {
        return arr.map(obj => obj[key])
      }
      const firstTrace = {
        type: 'scatter',
        mode: 'lines+markers',
        name: 'I/O Read (Bytes)',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'rx'),
        line: {color: '#17BECF'}
      }
      const secondTrace = {
        type: "scatter",
        mode: "lines+markers",
        name: 'I/O Write (Bytes)',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'tx'),
        line: {color: '#7F7F7F'}
      }
      const data = [firstTrace, secondTrace];
      const layout = {
        title: 'I/O Activity (All FDs combined)',
        showlegend: false
      };
      io_graph = Plotly.newPlot('io-container', data, layout);
      return io_graph;
    })
    .catch( error => console.log(error));

    fetch('/top_io')
    .then( response => {
      if (response.status !== 200) {
        console.log(response);
      }
      return response;
    })
    .then(response => response.json())
    .then(parsedResponse => {

      let i = 1;
      var table = document.getElementById("top_io");
      parsedResponse.forEach(function(item)
        {
       var row = table.rows[i];
       row.cells[0].innerHTML = item.location;
       row.cells[1].innerHTML = item.rx;
       row.cells[2].innerHTML = item.tx;
          i++;
        }
      );
    });

    fetch('/uptime')
    .then( response => {
      if (response.status !== 200) {
        console.log(response);
      }
      return response;
    })
    .then(response => response.json())
    .then(parsedResponse => {
      var uptime = document.getElementById("uptime");
      uptime.innerHTML = "Uptime: " + secondsToStr(parsedResponse.value);

    })
    .catch( error => console.log(error));


  fetch('/proc_usage')
    .then( response => {
      if (response.status !== 200) {
        console.log(response);
      }
      return response;
    })
    .then(response => response.json())
    .then(parsedResponse => {
      const unpackData = (arr, key) => {
        return arr.map(obj => obj[key])
      }
      const firstTrace = {
        type: 'scatter',
        mode: 'lines+markers',
        name: 'Kernel',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'kernel'),
        line: {color: '#17BECF'}
      }
      const secondTrace = {
        type: "scatter",
        mode: "lines+markers",
        name: 'User',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'user'),
        line: {color: '#7F7F7F'}
      }
      const thirdTrace = {
        type: "scatter",
        mode: "lines+markers",
        name: 'Virtual Memory',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'virtualMemorySize'),
        line: {color: '#7F7F7F'}
      }
      const fourthTrace = {
        type: "scatter",
        mode: "lines+markers",
        name: 'Resident Memory',
        x: unpackData(parsedResponse, 'time'),
        y: unpackData(parsedResponse, 'residentSetSize'),
        line: {color: '#17BECF'}
      }
      const cpu_data = [firstTrace, secondTrace];
      const mem_data = [thirdTrace, fourthTrace];
      const layout = {
        title: 'CPU Usage (All Processes Combined)',
        showlegend: false
      };
      const layout2 = {
        title: 'Memory Usage (All Processes Combined)',
        showlegend: false
      };
      Plotly.newPlot('memory-container', mem_data, layout2);

      Plotly.newPlot('cpu-container', cpu_data, layout);
    })
    .catch( error => console.log(error));
}

$(window).on('load', loadData);
window.setInterval(loadData, 60000);
</script>
</body></html>
